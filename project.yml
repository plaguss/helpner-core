title: "Detecting Commands, Arguments and Options in CLI Help messages (Named Entity Recognition)"
description: "This project deals with the backbone model that powers [helpner](https://github.com/plaguss/helpner)."

# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  config: "config.cfg"
  name: "helpner_core"
  version: "0.2.0"
  dataset: "dataset"
  train: "dataset_train"
  dev: "dataset_dev"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "training", "configs", "scripts", "corpus", "packages"]

# Assets that should be downloaded or available in the directory. But the
# 'project assets' command still lets you verify that the checksums match.
assets:
  - dest: "assets/${vars.dataset}.jsonl"
    description: "JSONL-formatted training data obtained from [`cli-help-maker`](https://github.com/plaguss/cli-help-maker)"

workflows:
  all:
    - split
    - convert
    - train
    - evaluate

commands:
  - name: "create-dataset"
    help: "Create a dataset using [cli-help-maker](https://github.com/plaguss/cli-help-maker)"
    script:
      - "cli-help-maker assets/v${vars.version}/dataset.yaml assets/v${vars.version}/dataset_v${vars.version}"
    deps:
      - "assets/v${vars.version}/dataset.yaml"
    outputs:
      - "assets/v${vars.version}/dataset_v${vars.version}/dataset.jsonl"
      - "assets/v${vars.version}/dataset_v${vars.version}/arguments.jsonl"

  - name: "split"
    help: "Split the .jsonl dataset file contents in train/dev"
    script:
      - "python scripts/split.py assets/v${vars.version}/dataset_v${vars.version}/${vars.dataset}.jsonl"
    deps:
      - "assets/v${vars.version}/dataset_v${vars.version}/${vars.dataset}.jsonl"
      - "scripts/split.py"
    outputs:
      - "assets/v${vars.version}/dataset_v${vars.version}/${vars.train}.jsonl"
      - "assets/v${vars.version}/dataset_v${vars.version}/${vars.dev}.jsonl"

  - name: "convert"
    help: "Convert .jsonl files to .spacy format"
    script:
      - "python scripts/convert.py assets/v${vars.version}/dataset_v${vars.version}/${vars.train}.jsonl corpus/${vars.train}.spacy"
      - "python scripts/convert.py assets/v${vars.version}/dataset_v${vars.version}/${vars.dev}.jsonl corpus/${vars.dev}.spacy"
    deps:
      - "assets/v${vars.version}/dataset_v${vars.version}/${vars.train}.jsonl"
      - "assets/v${vars.version}/dataset_v${vars.version}/${vars.dev}.jsonl"
      - "scripts/convert.py"
    outputs:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"

  - name: "train"
    help: "Train a named entity recognition model on cli help messages"
    script:
      - "python -m spacy train configs/${vars.config} --output training/ --paths.train corpus/${vars.train}.spacy --paths.dev corpus/${vars.dev}.spacy"
    deps:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"
    outputs:
      - "training/model-best"

  - name: "evaluate"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy benchmark accuracy training/model-best corpus/${vars.dev}.spacy --output training/metrics.json"
    deps:
      - "corpus/${vars.dev}.spacy"
      - "training/model-best"
    outputs:
      - "training/metrics.json"

  - name: package
    help: "Package the trained model so it can be installed"
    script:
      - "python -m spacy package training/model-best packages --name ${vars.name} --version ${vars.version} --force --build sdist,wheel"
    deps:
      - "training/model-best"
    outputs_no_cache:
      - "packages/en_${vars.name}-${vars.version}/dist/en_${vars.name}-${vars.version}.tar.gz"

  - name: release
    help: "WIP: Upload the packaged model to github releases"

  - name: readme
    help: "Auto-generate README via spacy."
    script:
      - "python scripts/create_readme.py README.md"
    deps:
      - "training/metrics.json"